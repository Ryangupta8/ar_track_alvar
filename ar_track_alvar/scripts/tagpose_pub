#!/usr/bin/env python
import roslib
import rospy
import actionlib
import roslib
import math
import sys
import rospy
import geometry_msgs.msg
from std_msgs.msg import String
from std_msgs.msg import Int8
from geometry_msgs.msg import PoseStamped, Point, Quaternion,PointStamped
from ar_track_alvar_msgs.msg import AlvarMarkers
# import tf2_ros
# import tf2_geometry_msgs
# import tf.transformations
# _ORIGIN_TF='map'
# _OFFSET_TF='map_en'

class ar_pose_manager(object):
    def __init__(self, wait=0.0):
        self.waypoints=[]
        self.posepub=rospy.Publisher('ar_tag_detected_pose',PoseStamped,queue_size=10)
        # self.tf_buffer=tf2_ros.Buffer(rospy.Duration(1000.0))
        # self.tf_listener=tf2_ros.TransformListener(self.tf_buffer)
        ar_topic='ar_pose_marker'
        rospy.Subscriber(ar_topic,AlvarMarkers, self.ar_marker_Cb)

    def ar_marker_Cb(self, msg):
        rospy.loginfo("ar_pose callback")
        # goal.header.frame_id="map_en"
        # try:
            # transform = self.tf_buffer.lookup_transform(_OFFSET_TF, _ORIGIN_TF,rospy.Time(0),rospy.Duration(1.0))
            # point_map=tf2_geometry_msgs.do_transform_point(goal,transform)
        # except:
            # rospy.loginfo("transformPosefailed")
        # pose_map.pose.position=point_map.point
        # pose_map.pose.orientation.w=1.0
        if len(msg.markers)>0:
            print(msg.header.frame_id)
            msg.markers[0].pose.header.frame_id=msg.markers[0].header.frame_id
            self.posepub.publish(msg.markers[0].pose)
            rospy.loginfo("target detected")
        # rospy.sleep(3.0)
        # rpsy.sleep()
        #Should check if the last action is still being executed
        # self.cli.wait_for_server()

    def starter(self,wait=0.0):
        # make sure the cont0roller is running
        # r=rospy.Rate(1)
        rospy.spin()            
        # for waypoint in self.waypoints:
            # self.sendactiongoal(waypoint)
        # fill ROS message
          
if __name__ == '__main__':
    rospy.init_node('a1_clicknavi')
    goal_manager = ar_pose_manager()
    goal_manager.starter()


































